name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop", "release/*" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'preview'
        type: choice
        options:
        - preview
        - staging
        - production

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write
  issues: write

env:
  DOTNET_VERSION: '6.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests and Code Quality
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore Console dependencies
      run: dotnet restore TEZ_Project.Console.sln
    
    - name: Build Console Solution
      run: dotnet build TEZ_Project.Console.sln --no-restore --configuration Release --verbosity minimal
    
    - name: Run Unit Tests
      run: dotnet test TEZ_Project.Console.sln --no-restore --verbosity normal --collect "XPlat Code Coverage" --logger trx --results-directory ./TestResults --settings coverlet.runsettings
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/
        retention-days: 30
    
    - name: Code Coverage Report
      uses: codecov/codecov-action@v4
      with:
        directory: ./TestResults
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Generate Test Report Summary
      if: success() || failure()
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f TestResults/*.trx ]; then
          echo "✅ Test results generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "📁 Test files found:" >> $GITHUB_STEP_SUMMARY
          find TestResults -name "*.trx" -exec basename {} \; | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Test execution completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No test result files found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: success() || failure()
      with:
        files: TestResults/**/*.trx
        check_name: "Test Results"
        comment_mode: failures
        fail_on: nothing

  build-linux:
    runs-on: ubuntu-latest
    name: 🐧 Linux Build
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore TEZ_Project.Console.sln
    
    - name: Build Console Project
      run: dotnet build TEZ_Project.Console.sln --no-restore --configuration Release --verbosity minimal
    
    - name: Publish Console (Linux)
      run: dotnet publish TEZ_Project.Console -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true
    
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tez-console-linux
        path: TEZ_Project.Console/bin/Release/net6.0/linux-x64/publish/

  build-windows:
    runs-on: windows-latest
    name: 🪟 Windows Console Build
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore Console dependencies
      run: dotnet restore TEZ_Project.Console.sln
    
    - name: Build Console Project (Windows)
      run: dotnet build TEZ_Project.Console.sln --configuration Release --no-restore --verbosity minimal
    
    - name: Publish Console (Windows)
      run: dotnet publish TEZ_Project.Console -c Release -r win-x64 --self-contained -p:PublishSingleFile=true
    
    - name: Upload Windows Console Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tez-console-windows
        path: TEZ_Project.Console/bin/Release/net6.0/win-x64/publish/

  build-wpf:
    runs-on: windows-latest
    name: 📺 Windows WPF Build
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore WPF Dependencies
      run: dotnet restore TEZ_Project.Windows.sln
    
    - name: Build WPF Project
      run: dotnet build TEZ_Project.Windows.sln --no-restore --configuration Release --verbosity minimal -p:TreatWarningsAsErrors=false
    
    - name: Publish WPF (Windows)
      run: dotnet publish TEZ_Project -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true
    
    - name: Upload WPF Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tez-wpf-windows
        path: TEZ_Project/bin/Release/net6.0-windows/win-x64/publish/

  docker-build:
    runs-on: ubuntu-latest
    name: 🐳 Docker Build & Security Scan
    needs: [test, build-linux]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker Image
      run: |
        echo "🐳 Building Docker image..."
        docker build -f Dockerfile -t tez-project:latest .
        docker build -f Dockerfile -t tez-project:${{ github.sha }} .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'tez-project:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

  deployment-readiness:
    runs-on: ubuntu-latest
    name: 🚀 Deployment Readiness
    needs: [test, build-linux, build-windows, build-wpf, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Generate Deployment Summary
      run: |
        echo "## 🚀 Deployment Ready!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ All checks passed:" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- 🐧 Linux Build: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- 🪟 Windows Build: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- 📺 WPF Build: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 Docker Build: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security Scan: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Available Deployments:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Manual Triggers Available:" >> $GITHUB_STEP_SUMMARY
        echo "1. **🧪 Development**: [Trigger Dev Deployment](https://github.com/${{ github.repository }}/actions/workflows/deploy-dev.yml)" >> $GITHUB_STEP_SUMMARY
        echo "2. **🎭 Staging**: [Trigger Staging Deployment](https://github.com/${{ github.repository }}/actions/workflows/deploy-staging.yml)" >> $GITHUB_STEP_SUMMARY
        echo "3. **☸️ Kubernetes**: [Trigger K8s Deployment](https://github.com/${{ github.repository }}/actions/workflows/deploy-k8s.yml)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### For Production Deployment:" >> $GITHUB_STEP_SUMMARY
        echo "- Create a release tag: \`git tag v1.x.x && git push origin v1.x.x\`" >> $GITHUB_STEP_SUMMARY
        echo "- Or use [Manual Production Deployment](https://github.com/${{ github.repository }}/actions/workflows/deploy-production.yml)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Create Deployment Issue
      if: github.event_name == 'push'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const body = `## 🚀 Deployment Ready for \`${{ github.sha }}\`
            
            ### ✅ All CI/CD checks passed successfully!
            
            **Branch**: \`${{ github.ref_name }}\`  
            **Commit**: \`${{ github.sha }}\`  
            **Author**: @${{ github.actor }}  
            **Time**: \`${{ github.event.head_commit.timestamp }}\`
            
            ### 🎯 Available Deployment Options:
            
            #### Automatic Deployments:
            - ✅ **CI/CD Pipeline**: Completed
            
            #### Manual Deployments:
            - 🧪 **[Development](https://github.com/${{ github.repository }}/actions/workflows/deploy-dev.yml)**: Ready for manual trigger
            - 🎭 **[Staging](https://github.com/${{ github.repository }}/actions/workflows/deploy-staging.yml)**: Ready for manual trigger  
            - ☸️ **[Kubernetes](https://github.com/${{ github.repository }}/actions/workflows/deploy-k8s.yml)**: Ready for manual trigger
            
            #### Production Deployment:
            - 🌟 **Production**: Create release tag \`v1.x.x\` or use [manual deployment](https://github.com/${{ github.repository }}/actions/workflows/deploy-production.yml)
            
            ### 📝 Next Steps:
            1. Choose deployment environment
            2. Click the appropriate workflow link above  
            3. Click "Run workflow" button
            4. Monitor deployment progress
            
            ---
            *This issue was automatically created by the CI/CD pipeline.*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 Deployment Ready: ${context.sha.substring(0, 7)}`,
              body: body,
              labels: ['deployment', 'ready', 'ci-cd']
            });
            
            console.log('✅ Deployment issue created successfully!');
          } catch (error) {
            console.log('⚠️  Could not create deployment issue:', error.message);
            console.log('ℹ️  This is optional - deployment links are still available in the step summary above.');
          }
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Test Docker Image
      run: |
        echo "🧪 Testing Docker container..."
        timeout 30s docker run --rm tez-project:latest || echo "Docker test completed"
    
  code-analysis:
    runs-on: ubuntu-latest
    name: 📊 Code Analysis
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore TEZ_Project.Console.sln
    
    - name: Run .NET Code Analysis
      run: dotnet build TEZ_Project.Console.sln --verbosity minimal --configuration Release -p:RunAnalyzersDuringBuild=true -p:TreatWarningsAsErrors=false
    
    - name: Generate Code Metrics
      run: |
        echo "📊 Code Metrics Report" > code-metrics.txt
        echo "=====================" >> code-metrics.txt
        echo "📁 Project Files:" >> code-metrics.txt
        find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" | wc -l | xargs echo "  C# Files:" >> code-metrics.txt
        find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" -exec wc -l {} + | tail -1 | awk '{print "  Total Lines: " $1}' >> code-metrics.txt
        echo "" >> code-metrics.txt
        echo "📦 Dependencies:" >> code-metrics.txt
        find . -name "*.csproj" -exec echo "  Project: {}" \; >> code-metrics.txt
        
        echo "🔍 Directory Structure:" >> code-metrics.txt
        tree -I 'bin|obj|.git' || find . -type d -not -path "./.*" | head -20 >> code-metrics.txt
    
    - name: Upload Code Metrics
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics
        path: code-metrics.txt

  performance-test:
    runs-on: ubuntu-latest
    name: ⚡ Performance Test
    needs: [build-linux]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: tez-console-linux
        path: ./linux-app
    
    - name: Performance Test
      run: |
        chmod +x ./linux-app/TEZ_Project.Console
        echo "⚡ Running performance test..."
        time timeout 10s ./linux-app/TEZ_Project.Console || echo "Performance test completed"
    
    - name: Memory Usage Test
      run: |
        echo "💾 Memory usage test..."
        /usr/bin/time -v timeout 10s ./linux-app/TEZ_Project.Console || echo "Memory test completed"
