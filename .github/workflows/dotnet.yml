name: .NET Build and Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  
  # Linux Console Build (–∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î)
  linux-console:
    runs-on: ubuntu-latest
    name: üêß Linux Console Build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore TEZ_Project.Console
      
    - name: Build Console Project
      run: dotnet build TEZ_Project.Console --no-restore --configuration Release
      
    - name: Test Console Project
      run: dotnet run --project TEZ_Project.Console --configuration Release
      
    - name: Publish Console (Linux)
      run: dotnet publish TEZ_Project.Console -c Release -r linux-x64 --self-contained
      
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tez-console-linux
        path: TEZ_Project.Console/bin/Release/net6.0/linux-x64/publish/

  # Windows WPF Build (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î Windows runner)
  windows-wpf:
    runs-on: windows-latest
    name: ü™ü Windows WPF Build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies (All Projects)
      run: dotnet restore
      
    - name: Build Console Project
      run: dotnet build TEZ_Project.Console --no-restore --configuration Release
      
    - name: Test Console Project  
      run: dotnet run --project TEZ_Project.Console --configuration Release
      
    - name: Build WPF Project
      run: dotnet build TEZ_Project --no-restore --configuration Release
      
    - name: Publish WPF (Windows)
      run: dotnet publish TEZ_Project -c Release -r win-x64 --self-contained
      
    - name: Upload WPF Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tez-wpf-windows
        path: TEZ_Project/bin/Release/net6.0-windows/win-x64/publish/

  # Common Library Analysis
  analyze-common:
    runs-on: ubuntu-latest
    name: üìä Code Analysis
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Count Lines of Code
      run: |
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç—É:"
        find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" | wc -l | xargs echo "CS Files:"
        find . -name "*.cs" -not -path "./bin/*" -not -path "./obj/*" -exec wc -l {} + | tail -1 | awk '{print "Total Lines: " $1}'
        
    - name: List Project Structure
      run: |
        echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É:"
        tree -I 'bin|obj|.git' || find . -type d -not -path "./.*" | head -20
        
    - name: Check Dependencies
      run: |
        echo "üì¶ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø—Ä–æ–µ–∫—Ç—É:"
        find . -name "*.csproj" -exec echo "=== {} ===" \; -exec cat {} \; || true

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: üê≥ Docker Build
    needs: [linux-console]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker Image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -f Dockerfile -t tez-project:latest .
        
    - name: Test Docker Image
      run: |
        echo "üß™ Testing Docker container..."
        docker run --rm tez-project:latest || echo "Docker test completed"
