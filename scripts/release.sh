#!/bin/bash

# 🚀 TEZ Project Release Script
# Usage: ./scripts/release.sh <version> [<release_notes>]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if version is provided
if [ $# -lt 1 ]; then
    print_error "Usage: $0 <version> [<release_notes>]"
    print_error "Example: $0 1.1.0 'Bug fixes and improvements'"
    exit 1
fi

VERSION=$1
RELEASE_NOTES=${2:-"Release version $VERSION"}

print_status "🚀 Starting release process for version $VERSION"

# Check if we're in the right directory
if [ ! -f "VERSION.txt" ]; then
    print_error "VERSION.txt not found. Please run this script from the project root."
    exit 1
fi

# Check if git is clean
if [[ -n $(git status --porcelain) ]]; then
    print_error "Git working directory is not clean. Please commit or stash changes first."
    git status --short
    exit 1
fi

# Update version file
print_status "📝 Updating VERSION.txt to $VERSION"
echo "$VERSION" > VERSION.txt

# Update releases file
print_status "📋 Updating RELEASES.md"
CURRENT_DATE=$(date +%Y-%m-%d)
TEMP_FILE=$(mktemp)

# Create new release entry
cat > "$TEMP_FILE" << EOF
# 📋 Release Notes

## 🚀 v$VERSION - $CURRENT_DATE

### 📝 Release Notes
$RELEASE_NOTES

### 🔧 Changes
- Version bump to $VERSION
- Updated documentation
- CI/CD pipeline improvements

EOF

# Append existing content (skip first line)
tail -n +2 RELEASES.md >> "$TEMP_FILE"
mv "$TEMP_FILE" RELEASES.md

# Commit changes
print_status "💾 Committing version changes"
git add VERSION.txt RELEASES.md
git commit -m "🔖 Bump version to $VERSION

- Update VERSION.txt to $VERSION
- Add release notes to RELEASES.md
- Prepare for release $VERSION"

# Create and push tag
print_status "🏷️  Creating tag v$VERSION"
git tag -a "v$VERSION" -m "Release v$VERSION

$RELEASE_NOTES

Generated by release script on $CURRENT_DATE"

print_status "📤 Pushing changes and tags to remote"
git push origin main
git push origin "v$VERSION"

# Create GitHub release
print_status "🌐 Creating GitHub release"
gh release create "v$VERSION" \
    --title "🚀 TEZ Project v$VERSION" \
    --notes "$RELEASE_NOTES

## 📦 Automated Build Artifacts
This release includes automatically generated build artifacts for all supported platforms:
- Linux Console executable
- Windows Console executable
- Windows WPF GUI application
- Docker container image

## 🔧 Installation
Download the appropriate build for your platform from the Assets section below.

## 📚 Documentation
See RELEASES.md for detailed release notes and README.md for setup instructions."

# Trigger CI/CD pipeline
print_status "🔄 Triggering CI/CD pipeline"
gh workflow run ci-cd.yml

print_success "✅ Release $VERSION completed successfully!"
print_success "🌐 GitHub Release: https://github.com/YuriiPidvirnyi/tez-project-decompiled/releases/tag/v$VERSION"
print_status "⏳ CI/CD pipeline is running. Check GitHub Actions for build artifacts."
print_status "🎉 Release process complete!"
